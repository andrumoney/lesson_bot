from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, ConversationHandler, filters
)
from openai import OpenAI

# üß† –í—Å—Ç–∞–≤—å —Å–≤–æ–π OpenAI API-–∫–ª—é—á
import os
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π (user_id ‚Üí –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
user_generation_count = {}
FREE_LIMIT = 1  # —Å–∫–æ–ª—å–∫–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ

# üß© –®–∞–≥–∏ –¥–∏–∞–ª–æ–≥–∞
SUBJECT, GRADE, TOPIC, FORMAT = range(4)

BOT_TOKEN = "7249401276:AAF1HfAbx35p2jMbtJk514Y4n5k4_0GTtAo"

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω —É—Ä–æ–∫–∞. –ù–∞–ø–∏—à–∏ /plan —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")

# /plan ‚Üí –≤—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞
async def plan_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", callback_data="–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"),
         InlineKeyboardButton("–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", callback_data="–†—É—Å—Å–∫–∏–π —è–∑—ã–∫")],
        [InlineKeyboardButton("–ë–∏–æ–ª–æ–≥–∏—è", callback_data="–ë–∏–æ–ª–æ–≥–∏—è"),
         InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è", callback_data="–ò—Å—Ç–æ—Ä–∏—è")]
    ]
    await update.effective_message.reply_text("–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=InlineKeyboardMarkup(keyboard))
    return SUBJECT

# –í—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞
async def subject_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["subject"] = query.data

    user_id = query.from_user.id
    count = user_generation_count.get(user_id, 0)

    if count >= FREE_LIMIT:
        keyboard = [[InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø", url="https://t.me/your_pay_link_or_site")]]
        await query.edit_message_text(
            text="üîí –í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.\n\n"
                 "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ ‚Äî –æ–ø–ª–∞—Ç–∏—Ç–µ –¥–æ—Å—Ç—É–ø:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ConversationHandler.END

    keyboard = [[InlineKeyboardButton(str(i), callback_data=str(i)) for i in range(1, 12)]]
    await query.edit_message_text("–í—ã–±–µ—Ä–∏ –∫–ª–∞—Å—Å:", reply_markup=InlineKeyboardMarkup(keyboard))
    return GRADE

# –í–≤–æ–¥ —Ç–µ–º—ã
async def grade_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["grade"] = query.data

    await query.edit_message_text("–ù–∞–ø–∏—à–∏ —Ç–µ–º—É —É—Ä–æ–∫–∞:")
    return TOPIC

# –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ —É—Ä–æ–∫–∞
async def topic_entered(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["topic"] = update.message.text

    keyboard = [
        [InlineKeyboardButton("–û–±—ã—á–Ω—ã–π", callback_data="–æ–±—ã—á–Ω—ã–π"),
         InlineKeyboardButton("–ï–ì–≠", callback_data="–ï–ì–≠")],
        [InlineKeyboardButton("–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ", callback_data="–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ"),
         InlineKeyboardButton("–ò–≥—Ä–æ–≤–æ–π", callback_data="–∏–≥—Ä–æ–≤–æ–π")]
    ]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç —É—Ä–æ–∫–∞:", reply_markup=InlineKeyboardMarkup(keyboard))
    return FORMAT

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ —É—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ OpenAI

async def format_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["format"] = query.data

    subject = context.user_data["subject"]
    grade = context.user_data["grade"]
    topic = context.user_data["topic"]
    lesson_format = context.user_data["format"]

    await query.edit_message_text("–°–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–ª–∞–Ω —É—Ä–æ–∫–∞... ‚è≥")

    prompt = (
        f"–°–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –ø–ª–∞–Ω —É—Ä–æ–∫–∞ –¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–æ–≤.\n"
        f"- –ü—Ä–µ–¥–º–µ—Ç: {subject}\n"
        f"- –ö–ª–∞—Å—Å: {grade}\n"
        f"- –¢–µ–º–∞: {topic}\n"
        f"- –§–æ—Ä–º–∞—Ç: {lesson_format}\n"
        f"–£–∫–∞–∂–∏ —Ü–µ–ª—å —É—Ä–æ–∫–∞, —ç—Ç–∞–ø—ã, –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –∑–∞–¥–∞–Ω–∏—è, –∏ –∫–æ—Ä–æ—Ç–∫–∏–π –≤—ã–≤–æ–¥.\n"
        f"–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ ‚Äî –∫–∞–∫ –≥–æ—Ç–æ–≤—ã–π –ø–ª–∞–Ω –¥–ª—è —É—á–∏—Ç–µ–ª—è."
    )

    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=1000,
            temperature=0.7,
        )
        plan = response.choices[0].message.content

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
        user_id = query.from_user.id
        count = user_generation_count.get(user_id, 0)
        user_generation_count[user_id] = count + 1

        await query.edit_message_text(plan[:4000])

    except Exception as e:
        await query.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")

    return ConversationHandler.END

# –ö–æ–º–∞–Ω–¥–∞ /cancel
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω–µ–Ω.")
    return ConversationHandler.END

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
conv_handler = ConversationHandler(
    entry_points=[CommandHandler("plan", plan_start)],
    states={
        SUBJECT: [CallbackQueryHandler(subject_chosen)],
        GRADE: [CallbackQueryHandler(grade_chosen)],
        TOPIC: [MessageHandler(filters.TEXT & ~filters.COMMAND, topic_entered)],
        FORMAT: [CallbackQueryHandler(format_chosen)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
    per_message=True,  # üëà –¥–æ–±–∞–≤—å –≤–æ—Ç —ç—Ç–æ
)

app.add_handler(CommandHandler("start", start))
app.add_handler(conv_handler)

print("‚úÖ –ë–æ—Ç —Å GPT-4o –∑–∞–ø—É—â–µ–Ω")
app.run_polling()
